; ===========================================================================
; ---------------------------------------------------------------------------
; Flags section. None of this is required, but I added it here to
; make it easier to debug built ROMS! If you would like easier
; assistance from Natsumi, please keep this section intact!
; ---------------------------------------------------------------------------
	dc.b "AMPS-AS-1.1 "		; ident str

	if FEATURE_UNDERWATER
		dc.b "UW"		; underwater mode enabled
	endif

	if FEATURE_MODULATION
		dc.b "MO"		; modulation enabled
	endif

	if FEATURE_DACFMVOLENV
		dc.b "VE"		; FM & DAC volume envelope enabled
	endif

	if FEATURE_MODENV
		dc.b "ME"		; modulation envelope enabled
	endif

	if FEATURE_PORTAMENTO
		dc.b "PM"		; portamento enabled
	endif

	if FEATURE_BACKUP
		dc.b "BA"		; backup enabled
	endif

; ===========================================================================
; ---------------------------------------------------------------------------
; Define music and SFX
; ---------------------------------------------------------------------------

;	opt oz-				; disable zero-offset optimization
	if safe=0
	;	nolist			; if in safe mode, list data section.
	endif

__mus :=	MusOff

MusicIndex:

mus_EHZ =	__mus
__mus :=	__mus+1
		dc.l (($42)<<24)|_mus_EHZ
mus_CPZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_CPZ
mus_ARZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_ARZ
mus_CNZ =	__mus
__mus :=	__mus+1
		dc.l (($98)<<24)|_mus_CNZ
mus_HTZ =	__mus
__mus :=	__mus+1
		dc.l (($22)<<24)|_mus_HTZ
mus_MCZ =	__mus
__mus :=	__mus+1
		dc.l (($2A)<<24)|_mus_MCZ


mus_OOZ =	__mus
__mus :=	__mus+1
		dc.l (($10)<<24)|_mus_OOZ
mus_MTZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_MTZ
mus_SCZ =	__mus
__mus :=	__mus+1
		dc.l (($85)<<24)|_mus_SCZ
mus_WFZ =	__mus
__mus :=	__mus+1
		dc.l (($58)<<24)|_mus_WFZ
mus_DEZ =	__mus
__mus :=	__mus+1
		dc.l (($80)<<24)|_mus_DEZ
mus_HPZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_HPZ


mus_EHZ2P =	__mus
__mus :=	__mus+1
		dc.l (($85)<<24)|_mus_EHZ2P
mus_CNZ2P =	__mus
__mus :=	__mus+1
		dc.l (($23)<<24)|_mus_CNZ2P
mus_MCZ2P =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_MCZ2P


mus_SS =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SS
mus_Options =	__mus
__mus :=	__mus+1
		dc.l (($79)<<24)|_mus_Options
mus_Results2P =	__mus
__mus :=	__mus+1
		dc.l (($98)<<24)|_mus_Results2P
mus_Invincibility =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_Invincibility


mus_SuperSonic =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SuperSonic
mus_Boss =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_Boss
mus_FinalBoss =	__mus
__mus :=	__mus+1
		dc.l (($37)<<24)|_mus_FinalBoss
mus_Drowning =	__mus
__mus :=	__mus+1
		dc.l (($80)<<24)|_mus_Drowning


mus_Title =	__mus
__mus :=	__mus+1
		dc.l (($33)<<24)|_mus_Title
mus_GotThroughAct =	__mus
__mus :=	__mus+1
		dc.l (($56)<<24)|_mus_GotThroughAct
mus_Emerald =	__mus
__mus :=	__mus+1
		dc.l (($2B)<<24)|_mus_Emerald
mus_ExtraLife =	__mus
__mus :=	__mus+1
		dc.l (($33)<<24)|_mus_ExtraLife


mus_GameOver =	__mus
__mus :=	__mus+1
		dc.l (($0E)<<24)|_mus_GameOver
mus_Continue =	__mus
__mus :=	__mus+1
		dc.l (($25)<<24)|_mus_Continue
mus_Ending =	__mus
__mus :=	__mus+1
		dc.l (($69)<<24)|_mus_Ending
mus_Credits =	__mus
__mus :=	__mus+1
		dc.l (($10)<<24)|_mus_Credits


mus_SEGA =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SEGA


MusCount =	__mus-MusOff		; number of installed music tracks
SFXoff =	__mus			; first SFX ID

__sfx :=	SFXoff

SoundIndex:
	
sfx_RingRight =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_RingRight
sfx_RingLeft =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_RingLeft
sfx_RingLoss =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_RingLoss
sfx_Splash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Splash
sfx_Break =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Break

	
sfx_Jump =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Jump
sfx_Roll =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Roll
sfx_Skid =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Skid
sfx_Bubble =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bubble
sfx_Drown =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Drown
sfx_SpikeHit =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeHit
sfx_Death =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Death

	
sfx_Spindash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Spindash
sfx_Dash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Dash
sfx_AirDing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_AirDing
sfx_Shield =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Shield
sfx_BossHit =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_BossHit
sfx_Flipper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Flipper

	
sfx_Starpost =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Starpost
sfx_Spring =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Spring
sfx_Signpost =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Signpost
sfx_Signpost2P =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Signpost2P
sfx_Register =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Register

	
sfx_Collapse =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Collapse
sfx_Smash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Smash
sfx_Switch =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Switch
sfx_Explode =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Explode
sfx_Zapper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Zapper
sfx_LidPop =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LidPop

	
sfx_Elevator =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Elevator
sfx_Bumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bumper
sfx_TinyBumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_TinyBumper
sfx_LargeBumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LargeBumper
sfx_Stomp =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Stomp

	
sfx_LaunchSpring =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LaunchSpring
sfx_SlotMachine =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SlotMachine
sfx_Gloop =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Gloop
sfx_GloopDrop =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_GloopDrop
sfx_Door =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Door

	
sfx_LavaBall =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LavaBall
sfx_Flame =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Flame
sfx_Fire =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Fire
sfx_ArrowFire =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ArrowFire
sfx_ArrowStick =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ArrowStick
sfx_Saw =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Saw

	
sfx_SpikeMove =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeMove
sfx_SpikeSwitch =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeSwitch
sfx_SpikeRing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeRing
sfx_PushBlock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_PushBlock
sfx_Beep =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Beep

	
sfx_Rumble =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Rumble
sfx_Rumble2 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Rumble2
sfx_DrawBridgeMove =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_DrawBridgeMove
sfx_DrawBridgeDown =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_DrawBridgeDown

	
sfx_Sparkle =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Sparkle
sfx_Transform =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Transform
sfx_Helicopter =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Helicopter
sfx_TrackLift =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_TrackLift
sfx_Leaves =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Leaves

	
sfx_Lazer =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Lazer
sfx_LargeLazer =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LargeLazer
sfx_LazerFloor =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LazerFloor
sfx_PlatformKnock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_PlatformKnock
sfx_Swap =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Swap

	
sfx_OilSlide =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_OilSlide
sfx_MechaSonic =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_MechaSonic
sfx_Error =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Error
sfx_EnterSS =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_EnterSS
sfx_Continue =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Continue


; unused sfx
	
sfx_Chain =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Chain
sfx_Bonus =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bonus
sfx_BigRing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_BigRing
sfx_ActionBlock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ActionBlock
sfx_Diamonds =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Diamonds

	
sfx_QuickDoor =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_QuickDoor
sfx_Electricity =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Electricity
sfx_Unk2B =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk2B
sfx_Unk38 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk38
sfx_Unk51 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk51
sfx_Unk52 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk52


SFXcount =	__sfx-SFXoff		; number of intalled sound effects
; ===========================================================================
; ---------------------------------------------------------------------------
; Define samples
; ---------------------------------------------------------------------------

__samp :=	$80
SampleList:
	sample $0000, Stop, Stop		; 80 - Stop sample (DO NOT EDIT)
	sample $0100, Kick, Stop		; 81 - Kick
	sample $0100, Snare, Stop		; 82 - Snare
	sample $0100, Clap, Stop		; 83 - Clap
	sample $0100, Scratch, Stop		; 84 - Scratch

	sample $0100, Timpani, Stop, HiTimpani	; 85 - High Timpani
	sample $00EE, Timpani, Stop, MidTimpani	; 86 - Mid Timpani
	sample $00D4, Timpani, Stop		; 87 - Mid Timpani
	sample $00D0, Timpani, Stop, LowTimpani	; 88 - Low Timpani
	sample $00CC, Timpani, Stop, FloorTimpani; 89 - Floor Timpani

	sample $0180, Tom, Stop, HiTom		; 8A - High Tom
	sample $0140, Tom, Stop, MidTom		; 8B - Mid Tom
	sample $0100, Tom, Stop, LowTom		; 8C - Low Tom
	sample $00E0, Tom, Stop, FloorTom	; 8D - Floor Tom

	sample $0100, Bongo, Stop, HiBongo	; 8E - High Bongo
	sample $00D0, Bongo, Stop, MidBongo	; 8F - Mid Bongo
	sample $00A0, Bongo, Stop, LowBongo	; 90 - Low Bongo
	sample $0080, Bongo, Stop, FloorBongo	; 91 - Floor Bongo
; ===========================================================================
; ---------------------------------------------------------------------------
; Define volume envelopes and their data
; ---------------------------------------------------------------------------

__venv :=	$01
VolEnvs:
	volenv 01, 02, 03, 04, 05, 06, 07, 08
	volenv 09, 0A, 0B, 0C, 0D
VolEnvs_End:
; ---------------------------------------------------------------------------

vd01:		dc.b $00, $00, $00, $08, $08, $08, $10, $10
		dc.b $10, $18, $18, $18, $20, $20, $20, $28
		dc.b $28, $28, $30, $30, $30, $38, eHold

vd02:		dc.b $00, $10, $20, $30, $40, $7F, eHold

vd03:		dc.b $00, $00, $08, $08, $10, $10, $18, $18
		dc.b $20, $20, $28, $28, $30, $30, $38, $38
		dc.b eHold

vd04:		dc.b $00, $00, $10, $18, $20, $20, $28, $28
		dc.b $28, $30, eHold

vd05:		dc.b $00, $00, $00, $00, $00, $00, $00, $00
		dc.b $00, $00, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $20, eHold

vd06:		dc.b $18, $18, $18, $10, $10, $10, $10, $08
		dc.b $08, $08, $00, $00, $00, $00, eHold

vd07:		dc.b $00, $00, $00, $00, $00, $00, $08, $08
		dc.b $08, $08, $08, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $20, $20, $20, $28, $28
		dc.b $28, $30, $38, eHold

vd08:		dc.b $00, $00, $00, $00, $00, $08, $08, $08
		dc.b $08, $08, $10, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $18, $18, $20, $20, $20
		dc.b $20, $20, $28, $28, $28, $28, $28, $30
		dc.b $30, $30, $30, $30, $38, $38, $38, eHold

vd09:		dc.b $00, $08, $10, $18, $20, $28, $30, $38
		dc.b $40, $48, $50, $58, $60, $68, $70, $78
		dc.b eHold

vd0A:		dc.b $00, $00, $00, $00, $00, $00, $00, $00
		dc.b $00, $00, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $18, $18, $20, eHold

vd0B:		dc.b $20, $20, $20, $18, $18, $18, $10, $10
		dc.b $10, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $18, $18, $18
		dc.b $18, $18, $20, eHold

vd0C:		dc.b $20, $20, $18, $18, $10, $10, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $10, $10, $10, $10, $18, $18
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $20, $20, $20, $20, $20, $20
		dc.b $20, $20, $20, $20, $20, $20, $20, $20
		dc.b $20, $20, $20, $20, $20, $20, $28, $28
		dc.b $28, $28, $28, $28, $28, $28, $28, $28
		dc.b $28, $28, $28, $28, $28, $28, $28, $28
		dc.b $28, $28, $30, $30, $30, $30, $30, $30
		dc.b $30, $30, $30, $30, $30, $30, $30, $30
		dc.b $30, $30, $30, $30, $30, $30, $38, eHold

vd0D:		dc.b $70, $68, $60, $58, $50, $48, $40, $38
		dc.b $30, $28, $20, $18, $10, $08, $00, eHold
; ===========================================================================
; ---------------------------------------------------------------------------
; Define volume envelopes and their data
; ---------------------------------------------------------------------------

		even
__menv :=	$01

ModEnvs:
ModEnvs_End:
; ---------------------------------------------------------------------------

	if FEATURE_MODENV

	endif

; ===========================================================================
; ---------------------------------------------------------------------------
; Include music, sound effects and voice table
; ---------------------------------------------------------------------------

	include "driver/Voices.asm"	; include universal Voice bank


; include SFX and music
sfxaddr:	
		align 2
_sfx_RingRight:	fuckingincludeit "driver/sfx/RingRight.asm"
		align 2
_sfx_RingLeft:	fuckingincludeit "driver/sfx/RingLeft.asm"
		align 2
_sfx_RingLoss:	fuckingincludeit "driver/sfx/RingLoss.asm"
		align 2
_sfx_Splash:	fuckingincludeit "driver/sfx/Splash.asm"
		align 2
_sfx_Break:	fuckingincludeit "driver/sfx/Break.asm"
		align 2
_sfx_Jump:	fuckingincludeit "driver/sfx/Jump.asm"
		align 2
_sfx_Roll:	fuckingincludeit "driver/sfx/Roll.asm"
		align 2
_sfx_Skid:	fuckingincludeit "driver/sfx/Skid.asm"
		align 2
_sfx_Bubble:	fuckingincludeit "driver/sfx/Bubble.asm"
		align 2
_sfx_Drown:	fuckingincludeit "driver/sfx/Drown.asm"
		align 2
_sfx_SpikeHit:	fuckingincludeit "driver/sfx/SpikeHit.asm"
		align 2
_sfx_Death:	fuckingincludeit "driver/sfx/Death.asm"
		align 2
_sfx_Spindash:	fuckingincludeit "driver/sfx/Spindash.asm"
		align 2
_sfx_Dash:	fuckingincludeit "driver/sfx/Dash.asm"
		align 2
_sfx_AirDing:	fuckingincludeit "driver/sfx/AirDing.asm"
		align 2
_sfx_Shield:	fuckingincludeit "driver/sfx/Shield.asm"
		align 2
_sfx_BossHit:	fuckingincludeit "driver/sfx/BossHit.asm"
		align 2
_sfx_Flipper:	fuckingincludeit "driver/sfx/Flipper.asm"
		align 2
_sfx_Starpost:	fuckingincludeit "driver/sfx/Starpost.asm"
		align 2
_sfx_Spring:	fuckingincludeit "driver/sfx/Spring.asm"
		align 2
_sfx_Signpost:	fuckingincludeit "driver/sfx/Signpost.asm"
		align 2
_sfx_Signpost2P:	fuckingincludeit "driver/sfx/Signpost2P.asm"
		align 2
_sfx_Register:	fuckingincludeit "driver/sfx/Register.asm"
		align 2
_sfx_Collapse:	fuckingincludeit "driver/sfx/Collapse.asm"
		align 2
_sfx_Smash:	fuckingincludeit "driver/sfx/Smash.asm"
		align 2
_sfx_Switch:	fuckingincludeit "driver/sfx/Switch.asm"
		align 2
_sfx_Explode:	fuckingincludeit "driver/sfx/Explode.asm"
		align 2
_sfx_Zapper:	fuckingincludeit "driver/sfx/Zapper.asm"
		align 2
_sfx_LidPop:	fuckingincludeit "driver/sfx/LidPop.asm"
		align 2
_sfx_Elevator:	fuckingincludeit "driver/sfx/Elevator.asm"
		align 2
_sfx_Bumper:	fuckingincludeit "driver/sfx/Bumper.asm"
		align 2
_sfx_TinyBumper:	fuckingincludeit "driver/sfx/TinyBumper.asm"
		align 2
_sfx_LargeBumper:	fuckingincludeit "driver/sfx/LargeBumper.asm"
		align 2
_sfx_Stomp:	fuckingincludeit "driver/sfx/Stomp.asm"
		align 2
_sfx_LaunchSpring:	fuckingincludeit "driver/sfx/LaunchSpring.asm"
		align 2
_sfx_SlotMachine:	fuckingincludeit "driver/sfx/SlotMachine.asm"
		align 2
_sfx_Gloop:	fuckingincludeit "driver/sfx/Gloop.asm"
		align 2
_sfx_GloopDrop:	fuckingincludeit "driver/sfx/GloopDrop.asm"
		align 2
_sfx_Door:	fuckingincludeit "driver/sfx/Door.asm"
		align 2
_sfx_LavaBall:	fuckingincludeit "driver/sfx/LavaBall.asm"
		align 2
_sfx_Flame:	fuckingincludeit "driver/sfx/Flame.asm"
		align 2
_sfx_Fire:	fuckingincludeit "driver/sfx/Fire.asm"
		align 2
_sfx_ArrowFire:	fuckingincludeit "driver/sfx/ArrowFire.asm"
		align 2
_sfx_ArrowStick:	fuckingincludeit "driver/sfx/ArrowStick.asm"
		align 2
_sfx_Saw:	fuckingincludeit "driver/sfx/Saw.asm"
		align 2
_sfx_SpikeMove:	fuckingincludeit "driver/sfx/SpikeMove.asm"
		align 2
_sfx_SpikeSwitch:	fuckingincludeit "driver/sfx/SpikeSwitch.asm"
		align 2
_sfx_SpikeRing:	fuckingincludeit "driver/sfx/SpikeRing.asm"
		align 2
_sfx_PushBlock:	fuckingincludeit "driver/sfx/PushBlock.asm"
		align 2
_sfx_Beep:	fuckingincludeit "driver/sfx/Beep.asm"
		align 2
_sfx_Rumble:	fuckingincludeit "driver/sfx/Rumble.asm"
		align 2
_sfx_Rumble2:	fuckingincludeit "driver/sfx/Rumble2.asm"
		align 2
_sfx_DrawBridgeMove:	fuckingincludeit "driver/sfx/DrawBridgeMove.asm"
		align 2
_sfx_DrawBridgeDown:	fuckingincludeit "driver/sfx/DrawBridgeDown.asm"
		align 2
_sfx_Sparkle:	fuckingincludeit "driver/sfx/Sparkle.asm"
		align 2
_sfx_Transform:	fuckingincludeit "driver/sfx/Transform.asm"
		align 2
_sfx_Helicopter:	fuckingincludeit "driver/sfx/Helicopter.asm"
		align 2
_sfx_TrackLift:	fuckingincludeit "driver/sfx/TrackLift.asm"
		align 2
_sfx_Leaves:	fuckingincludeit "driver/sfx/Leaves.asm"
		align 2
_sfx_Lazer:	fuckingincludeit "driver/sfx/Lazer.asm"
		align 2
_sfx_LargeLazer:	fuckingincludeit "driver/sfx/LargeLazer.asm"
		align 2
_sfx_LazerFloor:	fuckingincludeit "driver/sfx/LazerFloor.asm"
		align 2
_sfx_PlatformKnock:	fuckingincludeit "driver/sfx/PlatformKnock.asm"
		align 2
_sfx_Swap:	fuckingincludeit "driver/sfx/Swap.asm"
		align 2
_sfx_OilSlide:	fuckingincludeit "driver/sfx/OilSlide.asm"
		align 2
_sfx_MechaSonic:	fuckingincludeit "driver/sfx/MechaSonic.asm"
		align 2
_sfx_Error:	fuckingincludeit "driver/sfx/Error.asm"
		align 2
_sfx_EnterSS:	fuckingincludeit "driver/sfx/EnterSS.asm"
		align 2
_sfx_Continue:	fuckingincludeit "driver/sfx/Continue.asm"
		align 2
_sfx_Chain:	fuckingincludeit "driver/sfx/Chain.asm"
		align 2
_sfx_Bonus:	fuckingincludeit "driver/sfx/Bonus.asm"
		align 2
_sfx_BigRing:	fuckingincludeit "driver/sfx/BigRing.asm"
		align 2
_sfx_ActionBlock:	fuckingincludeit "driver/sfx/ActionBlock.asm"
		align 2
_sfx_Diamonds:	fuckingincludeit "driver/sfx/Diamonds.asm"
		align 2
_sfx_QuickDoor:	fuckingincludeit "driver/sfx/QuickDoor.asm"
		align 2
_sfx_Electricity:	fuckingincludeit "driver/sfx/Electricity.asm"
		align 2
_sfx_Unk2B:	fuckingincludeit "driver/sfx/Unk2B.asm"
		align 2
_sfx_Unk38:	fuckingincludeit "driver/sfx/Unk38.asm"
		align 2
_sfx_Unk51:	fuckingincludeit "driver/sfx/Unk51.asm"
		align 2
_sfx_Unk52:	fuckingincludeit "driver/sfx/Unk52.asm"

musaddr:	
		align 2
_mus_EHZ:	fuckingincludeit "driver/music/EHZ.asm"
		align 2
_mus_CPZ:	fuckingincludeit "driver/music/CPZ.asm"
		align 2
_mus_ARZ:	fuckingincludeit "driver/music/ARZ.asm"
		align 2
_mus_CNZ:	fuckingincludeit "driver/music/CNZ.asm"
		align 2
_mus_HTZ:	fuckingincludeit "driver/music/HTZ.asm"
		align 2
_mus_MCZ:	fuckingincludeit "driver/music/MCZ.asm"
		align 2
_mus_OOZ:	fuckingincludeit "driver/music/OOZ.asm"
		align 2
_mus_MTZ:	fuckingincludeit "driver/music/MTZ.asm"
		align 2
_mus_SCZ:	fuckingincludeit "driver/music/SCZ.asm"
		align 2
_mus_WFZ:	fuckingincludeit "driver/music/WFZ.asm"
		align 2
_mus_DEZ:	fuckingincludeit "driver/music/DEZ.asm"
		align 2
_mus_HPZ:	fuckingincludeit "driver/music/HPZ.asm"
		align 2
_mus_EHZ2P:	fuckingincludeit "driver/music/EHZ2P.asm"
		align 2
_mus_CNZ2P:	fuckingincludeit "driver/music/CNZ2P.asm"
		align 2
_mus_MCZ2P:	fuckingincludeit "driver/music/MCZ2P.asm"
		align 2
_mus_SS:	fuckingincludeit "driver/music/SS.asm"
		align 2
_mus_Options:	fuckingincludeit "driver/music/Options.asm"
		align 2
_mus_Results2P:	fuckingincludeit "driver/music/Results2P.asm"
		align 2
_mus_Invincibility:	fuckingincludeit "driver/music/Invincibility.asm"
		align 2
_mus_SuperSonic:	fuckingincludeit "driver/music/SuperSonic.asm"
		align 2
_mus_Boss:	fuckingincludeit "driver/music/Boss.asm"
		align 2
_mus_FinalBoss:	fuckingincludeit "driver/music/FinalBoss.asm"
		align 2
_mus_Drowning:	fuckingincludeit "driver/music/Drowning.asm"
		align 2
_mus_Title:	fuckingincludeit "driver/music/Title.asm"
		align 2
_mus_GotThroughAct:	fuckingincludeit "driver/music/GotThroughAct.asm"
		align 2
_mus_Emerald:	fuckingincludeit "driver/music/Emerald.asm"
		align 2
_mus_ExtraLife:	fuckingincludeit "driver/music/ExtraLife.asm"
		align 2
_mus_GameOver:	fuckingincludeit "driver/music/GameOver.asm"
		align 2
_mus_Continue:	fuckingincludeit "driver/music/Continue.asm"
		align 2
_mus_Ending:	fuckingincludeit "driver/music/Ending.asm"
		align 2
_mus_Credits:	fuckingincludeit "driver/music/Credits.asm"
		align 2
_mus_SEGA:	fuckingincludeit "driver/music/SEGA.asm"

musend:
; ===========================================================================
; ---------------------------------------------------------------------------
; Include samples and filters
; ---------------------------------------------------------------------------

		align	$8000		; must be aligned to bank... By the way, these are also set in Z80.asm. Be sure to check it out also.
fLog:		binclude "driver/filters/Logarithmic.dat"; logarithmic filter (no filter)
;fLinear:	binclude "driver/filters/Linear.dat"	; linear filter (no filter)

dacaddr:	asdata Z80E_Read*(MaxPitch/$100), $00
SWF_Stop:	asdata $8000-(2*Z80E_Read*(MaxPitch/$100)), $80
SWFR_Stop:	asdata Z80E_Read*(MaxPitch/$100), $00

	incSWF	Kick, Snare, Clap, Tom, Timpani, Bongo
	incSWF	Scratch
	even
;	list				; continue source listing
; ===========================================================================
