; ===========================================================================
; ---------------------------------------------------------------------------
; Flags section. None of this is required, but I added it here to
; make it easier to debug built ROMS! If you would like easier
; assistance from Aurora, please keep this section intact!
; ---------------------------------------------------------------------------
	dc.b "AMPS-v1.1"		; ident str

	if safe
		dc.b "s"		; safe mode enabled

	else
		dc.b " "		; safe mode disabled
	endif

	if FEATURE_FM6
		dc.b "F6"		; FM6 enabled
	endif

	if FEATURE_SFX_MASTERVOL
		dc.b "SM"		; sfx ignore master volume
	endif

	if FEATURE_UNDERWATER
		dc.b "UW"		; underwater mode enabled
	endif

	if FEATURE_MODULATION
		dc.b "MO"		; modulation enabled
	endif

	if FEATURE_DACFMVOLENV
		dc.b "VE"		; FM & DAC volume envelope enabled
	endif

	if FEATURE_MODENV
		dc.b "ME"		; modulation envelope enabled
	endif

	if FEATURE_PORTAMENTO
		dc.b "PM"		; portamento enabled
	endif

	if FEATURE_BACKUP
		dc.b "BA"		; backup enabled
	endif
; ===========================================================================
; ---------------------------------------------------------------------------
; Define music and SFX
; ---------------------------------------------------------------------------

	if safe=0
		listings off		; if in safe mode, list data section.
	endif

__mus :=	MusOff

MusicIndex:

mus_EHZ =	__mus
__mus :=	__mus+1
		dc.l (($42)<<24)|_mus_EHZ
mus_CPZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_CPZ
mus_ARZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_ARZ
mus_CNZ =	__mus
__mus :=	__mus+1
		dc.l (($98)<<24)|_mus_CNZ
mus_HTZ =	__mus
__mus :=	__mus+1
		dc.l (($22)<<24)|_mus_HTZ
mus_MCZ =	__mus
__mus :=	__mus+1
		dc.l (($2A)<<24)|_mus_MCZ


mus_OOZ =	__mus
__mus :=	__mus+1
		dc.l (($10)<<24)|_mus_OOZ
mus_MTZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_MTZ
mus_SCZ =	__mus
__mus :=	__mus+1
		dc.l (($85)<<24)|_mus_SCZ
mus_WFZ =	__mus
__mus :=	__mus+1
		dc.l (($58)<<24)|_mus_WFZ
mus_DEZ =	__mus
__mus :=	__mus+1
		dc.l (($80)<<24)|_mus_DEZ
mus_HPZ =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_HPZ


mus_EHZ2P =	__mus
__mus :=	__mus+1
		dc.l (($85)<<24)|_mus_EHZ2P
mus_CNZ2P =	__mus
__mus :=	__mus+1
		dc.l (($23)<<24)|_mus_CNZ2P
mus_MCZ2P =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_MCZ2P


mus_SS =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SS
mus_Options =	__mus
__mus :=	__mus+1
		dc.l (($79)<<24)|_mus_Options
mus_Results2P =	__mus
__mus :=	__mus+1
		dc.l (($98)<<24)|_mus_Results2P
mus_Invincibility =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_Invincibility


mus_SuperSonic =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SuperSonic
mus_Boss =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_Boss
mus_FinalBoss =	__mus
__mus :=	__mus+1
		dc.l (($37)<<24)|_mus_FinalBoss
mus_Drowning =	__mus
__mus :=	__mus+1
		dc.l (($80)<<24)|_mus_Drowning


mus_Title =	__mus
__mus :=	__mus+1
		dc.l (($33)<<24)|_mus_Title
mus_GotThroughAct =	__mus
__mus :=	__mus+1
		dc.l (($56)<<24)|_mus_GotThroughAct
mus_Emerald =	__mus
__mus :=	__mus+1
		dc.l (($2B)<<24)|_mus_Emerald
mus_ExtraLife =	__mus
__mus :=	__mus+1
		dc.l (($33)<<24)|_mus_ExtraLife


mus_GameOver =	__mus
__mus :=	__mus+1
		dc.l (($0E)<<24)|_mus_GameOver
mus_Continue =	__mus
__mus :=	__mus+1
		dc.l (($25)<<24)|_mus_Continue
mus_Ending =	__mus
__mus :=	__mus+1
		dc.l (($69)<<24)|_mus_Ending
mus_Credits =	__mus
__mus :=	__mus+1
		dc.l (($10)<<24)|_mus_Credits


mus_SEGA =	__mus
__mus :=	__mus+1
		dc.l (($00)<<24)|_mus_SEGA


MusCount =	__mus-MusOff		; number of installed music tracks
SFXoff =	__mus			; first SFX ID
__sfx :=	SFXoff
; ---------------------------------------------------------------------------

SoundIndex:
	
sfx_RingRight =	__sfx
__sfx :=	__sfx+1
		dc.l (($01)<<24)|_sfx_RingRight

	
sfx_RingLeft =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_RingLeft
sfx_RingLoss =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_RingLoss
sfx_Splash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Splash
sfx_Break =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Break
sfx_Jump =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Jump
sfx_Roll =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Roll

	
sfx_Skid =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Skid
sfx_Bubble =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bubble
sfx_Drown =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Drown
sfx_SpikeHit =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeHit
sfx_Death =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Death
sfx_Spindash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Spindash

	
sfx_Dash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Dash
sfx_AirDing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_AirDing
sfx_Shield =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Shield
sfx_BossHit =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_BossHit
sfx_Flipper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Flipper
sfx_Spring =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Spring

	
sfx_Starpost =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Starpost
sfx_Signpost =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Signpost
sfx_Signpost2P =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Signpost2P
sfx_Register =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Register
sfx_Smash =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Smash

	
sfx_Collapse =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Collapse
sfx_Switch =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Switch
sfx_Explode =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Explode
sfx_Zapper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Zapper
sfx_LidPop =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LidPop
sfx_Bumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bumper

	
sfx_Elevator =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Elevator
sfx_TinyBumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_TinyBumper
sfx_LargeBumper =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LargeBumper
sfx_Stomp =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Stomp
sfx_Door =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Door

	
sfx_LaunchSpring =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LaunchSpring
sfx_SlotMachine =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SlotMachine
sfx_GloopDrop =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_GloopDrop
sfx_LavaBall =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LavaBall

	
sfx_Flame =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Flame
sfx_Fire =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Fire
sfx_ArrowFire =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ArrowFire
sfx_ArrowStick =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ArrowStick
sfx_Saw =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Saw
sfx_TrackLift =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_TrackLift

	
sfx_SpikeMove =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeMove
sfx_SpikeSwitch =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeSwitch
sfx_SpikeRing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_SpikeRing
sfx_PushBlock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_PushBlock

	
sfx_Rumble =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Rumble
sfx_Rumble2 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Rumble2
sfx_DrawBridgeMove =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_DrawBridgeMove
sfx_DrawBridgeDown =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_DrawBridgeDown

	
sfx_Sparkle =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Sparkle
sfx_Transform =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Transform
sfx_Helicopter =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Helicopter
sfx_Leaves =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Leaves
sfx_Beep =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Beep
sfx_Swap =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Swap

	
sfx_Lazer =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Lazer
sfx_LargeLazer =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LargeLazer
sfx_LazerFloor =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_LazerFloor
sfx_PlatformKnock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_PlatformKnock

	
sfx_OilSlide =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_OilSlide
sfx_MechaSonic =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_MechaSonic
sfx_Error =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Error
sfx_EnterSS =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_EnterSS
sfx_Continue =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Continue

	
sfx_Gloop =	__sfx
__sfx :=	__sfx+1
		dc.l (($80)<<24)|_sfx_Gloop


; unused sfx
	
sfx_Chain =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Chain
sfx_Bonus =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Bonus
sfx_BigRing =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_BigRing
sfx_ActionBlock =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_ActionBlock
sfx_Diamonds =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Diamonds

	
sfx_QuickDoor =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_QuickDoor
sfx_Electricity =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Electricity
sfx_Unk2B =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk2B
sfx_Unk38 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk38
sfx_Unk51 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk51
sfx_Unk52 =	__sfx
__sfx :=	__sfx+1
		dc.l ((0)<<24)|_sfx_Unk52


SFXcount =	__sfx-SFXoff		; number of intalled sound effects
SFXlast =	__sfx
; ===========================================================================
; ---------------------------------------------------------------------------
; Define samples
; ---------------------------------------------------------------------------

__samp :=	$80
SampleList:
	sample $0000, Stop, Stop		; 80 - Stop sample (DO NOT EDIT)
	sample $0100, Kick, Stop		; 81 - Kick
	sample $0100, Snare, Stop		; 82 - Snare
	sample $0100, Clap, Stop		; 83 - Clap
	sample $0100, Scratch, Stop		; 84 - Scratch

	sample $0100, Timpani, Stop, HiTimpani	; 85 - High Timpani
	sample $00EE, Timpani, Stop, MidTimpani	; 86 - Mid Timpani
	sample $00D4, Timpani, Stop		; 87 - Mid Timpani
	sample $00D0, Timpani, Stop, LowTimpani	; 88 - Low Timpani
	sample $00CC, Timpani, Stop, FloorTimpani; 89 - Floor Timpani

	sample $0180, Tom, Stop, HiTom		; 8A - High Tom
	sample $0140, Tom, Stop, MidTom		; 8B - Mid Tom
	sample $0100, Tom, Stop, LowTom		; 8C - Low Tom
	sample $00E0, Tom, Stop, FloorTom	; 8D - Floor Tom

	sample $0100, Bongo, Stop, HiBongo	; 8E - High Bongo
	sample $00D0, Bongo, Stop, MidBongo	; 8F - Mid Bongo
	sample $00A0, Bongo, Stop, LowBongo	; 90 - Low Bongo
	sample $0080, Bongo, Stop, FloorBongo	; 91 - Floor Bongo

	sample $0100, SEGA, Stop		; 92 - SEGA
; ===========================================================================
; ---------------------------------------------------------------------------
; Define volume envelopes and their data
; ---------------------------------------------------------------------------

vNone =		$00
__venv :=	$01

VolEnvs:
	volenv 01, 02, 03, 04, 05, 06, 07, 08
	volenv 09, 0A, 0B, 0C, 0D
VolEnvs_End:
; ---------------------------------------------------------------------------

vd01:		dc.b $00, $00, $00, $08, $08, $08, $10, $10
		dc.b $10, $18, $18, $18, $20, $20, $20, $28
		dc.b $28, $28, $30, $30, $30, $38, eHold

vd02:		dc.b $00, $10, $20, $30, $40, $7F, eHold

vd03:		dc.b $00, $00, $08, $08, $10, $10, $18, $18
		dc.b $20, $20, $28, $28, $30, $30, $38, $38
		dc.b eHold

vd04:		dc.b $00, $00, $10, $18, $20, $20, $28, $28
		dc.b $28, $30, eHold

vd05:		dc.b $00, $00, $00, $00, $00, $00, $00, $00
		dc.b $00, $00, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $20, eHold

vd06:		dc.b $18, $18, $18, $10, $10, $10, $10, $08
		dc.b $08, $08, $00, $00, $00, $00, eHold

vd07:		dc.b $00, $00, $00, $00, $00, $00, $08, $08
		dc.b $08, $08, $08, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $20, $20, $20, $28, $28
		dc.b $28, $30, $38, eHold

vd08:		dc.b $00, $00, $00, $00, $00, $08, $08, $08
		dc.b $08, $08, $10, $10, $10, $10, $10, $10
		dc.b $18, $18, $18, $18, $18, $20, $20, $20
		dc.b $20, $20, $28, $28, $28, $28, $28, $30
		dc.b $30, $30, $30, $30, $38, $38, $38, eHold

vd09:		dc.b $00, $08, $10, $18, $20, $28, $30, $38
		dc.b $40, $48, $50, $58, $60, $68, $70, $78
		dc.b eHold

vd0A:		dc.b $00, $00, $00, $00, $00, $00, $00, $00
		dc.b $00, $00, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $18, $18, $20, eHold

vd0B:		dc.b $20, $20, $20, $18, $18, $18, $10, $10
		dc.b $10, $08, $08, $08, $08, $08, $08, $08
		dc.b $10, $10, $10, $10, $10, $18, $18, $18
		dc.b $18, $18, $20, eHold

vd0C:		dc.b $20, $20, $18, $18, $10, $10, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $08, $08, $08, $08, $08, $08
		dc.b $08, $08, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $10, $10, $10, $10, $10, $10
		dc.b $10, $10, $10, $10, $10, $10, $18, $18
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $18, $18, $18, $18, $18, $18
		dc.b $18, $18, $20, $20, $20, $20, $20, $20
		dc.b $20, $20, $20, $20, $20, $20, $20, $20
		dc.b $20, $20, $20, $20, $20, $20, $28, $28
		dc.b $28, $28, $28, $28, $28, $28, $28, $28
		dc.b $28, $28, $28, $28, $28, $28, $28, $28
		dc.b $28, $28, $30, $30, $30, $30, $30, $30
		dc.b $30, $30, $30, $30, $30, $30, $30, $30
		dc.b $30, $30, $30, $30, $30, $30, $38, eHold

vd0D:		dc.b $70, $68, $60, $58, $50, $48, $40, $38
		dc.b $30, $28, $20, $18, $10, $08, $00, eHold
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Define volume envelopes and their data
; ---------------------------------------------------------------------------

mNone =		$00
__menv :=	$01

ModEnvs:
ModEnvs_End:
; ---------------------------------------------------------------------------

	if FEATURE_MODENV

		even
	endif
; ===========================================================================
; ---------------------------------------------------------------------------
; Include music, sound effects and voice bank
; ---------------------------------------------------------------------------

	include "AMPS/Voices.s2a"	; include universal voice bank
; ---------------------------------------------------------------------------

; include SFX and music
sfxaddr:	
		align 2
_sfx_RingRight:	include "AMPS/sfx/RingRight.s2a"
		align 2
_sfx_RingLeft:	include "AMPS/sfx/RingLeft.s2a"
		align 2
_sfx_RingLoss:	include "AMPS/sfx/RingLoss.s2a"
		align 2
_sfx_Splash:	include "AMPS/sfx/Splash.s2a"
		align 2
_sfx_Break:	include "AMPS/sfx/Break.s2a"
		align 2
_sfx_Jump:	include "AMPS/sfx/Jump.s2a"
		align 2
_sfx_Roll:	include "AMPS/sfx/Roll.s2a"
		align 2
_sfx_Skid:	include "AMPS/sfx/Skid.s2a"
		align 2
_sfx_Bubble:	include "AMPS/sfx/Bubble.s2a"
		align 2
_sfx_Drown:	include "AMPS/sfx/Drown.s2a"
		align 2
_sfx_SpikeHit:	include "AMPS/sfx/SpikeHit.s2a"
		align 2
_sfx_Death:	include "AMPS/sfx/Death.s2a"
		align 2
_sfx_Spindash:	include "AMPS/sfx/Spindash.s2a"
		align 2
_sfx_Dash:	include "AMPS/sfx/Dash.s2a"
		align 2
_sfx_AirDing:	include "AMPS/sfx/AirDing.s2a"
		align 2
_sfx_Shield:	include "AMPS/sfx/Shield.s2a"
		align 2
_sfx_BossHit:	include "AMPS/sfx/BossHit.s2a"
		align 2
_sfx_Flipper:	include "AMPS/sfx/Flipper.s2a"
		align 2
_sfx_Spring:	include "AMPS/sfx/Spring.s2a"
		align 2
_sfx_Starpost:	include "AMPS/sfx/Starpost.s2a"
		align 2
_sfx_Signpost:	include "AMPS/sfx/Signpost.s2a"
		align 2
_sfx_Signpost2P:	include "AMPS/sfx/Signpost2P.s2a"
		align 2
_sfx_Register:	include "AMPS/sfx/Register.s2a"
		align 2
_sfx_Smash:	include "AMPS/sfx/Smash.s2a"
		align 2
_sfx_Collapse:	include "AMPS/sfx/Collapse.s2a"
		align 2
_sfx_Switch:	include "AMPS/sfx/Switch.s2a"
		align 2
_sfx_Explode:	include "AMPS/sfx/Explode.s2a"
		align 2
_sfx_Zapper:	include "AMPS/sfx/Zapper.s2a"
		align 2
_sfx_LidPop:	include "AMPS/sfx/LidPop.s2a"
		align 2
_sfx_Bumper:	include "AMPS/sfx/Bumper.s2a"
		align 2
_sfx_Elevator:	include "AMPS/sfx/Elevator.s2a"
		align 2
_sfx_TinyBumper:	include "AMPS/sfx/TinyBumper.s2a"
		align 2
_sfx_LargeBumper:	include "AMPS/sfx/LargeBumper.s2a"
		align 2
_sfx_Stomp:	include "AMPS/sfx/Stomp.s2a"
		align 2
_sfx_Door:	include "AMPS/sfx/Door.s2a"
		align 2
_sfx_LaunchSpring:	include "AMPS/sfx/LaunchSpring.s2a"
		align 2
_sfx_SlotMachine:	include "AMPS/sfx/SlotMachine.s2a"
		align 2
_sfx_GloopDrop:	include "AMPS/sfx/GloopDrop.s2a"
		align 2
_sfx_LavaBall:	include "AMPS/sfx/LavaBall.s2a"
		align 2
_sfx_Flame:	include "AMPS/sfx/Flame.s2a"
		align 2
_sfx_Fire:	include "AMPS/sfx/Fire.s2a"
		align 2
_sfx_ArrowFire:	include "AMPS/sfx/ArrowFire.s2a"
		align 2
_sfx_ArrowStick:	include "AMPS/sfx/ArrowStick.s2a"
		align 2
_sfx_Saw:	include "AMPS/sfx/Saw.s2a"
		align 2
_sfx_TrackLift:	include "AMPS/sfx/TrackLift.s2a"
		align 2
_sfx_SpikeMove:	include "AMPS/sfx/SpikeMove.s2a"
		align 2
_sfx_SpikeSwitch:	include "AMPS/sfx/SpikeSwitch.s2a"
		align 2
_sfx_SpikeRing:	include "AMPS/sfx/SpikeRing.s2a"
		align 2
_sfx_PushBlock:	include "AMPS/sfx/PushBlock.s2a"
		align 2
_sfx_Rumble:	include "AMPS/sfx/Rumble.s2a"
		align 2
_sfx_Rumble2:	include "AMPS/sfx/Rumble2.s2a"
		align 2
_sfx_DrawBridgeMove:	include "AMPS/sfx/DrawBridgeMove.s2a"
		align 2
_sfx_DrawBridgeDown:	include "AMPS/sfx/DrawBridgeDown.s2a"
		align 2
_sfx_Sparkle:	include "AMPS/sfx/Sparkle.s2a"
		align 2
_sfx_Transform:	include "AMPS/sfx/Transform.s2a"
		align 2
_sfx_Helicopter:	include "AMPS/sfx/Helicopter.s2a"
		align 2
_sfx_Leaves:	include "AMPS/sfx/Leaves.s2a"
		align 2
_sfx_Beep:	include "AMPS/sfx/Beep.s2a"
		align 2
_sfx_Swap:	include "AMPS/sfx/Swap.s2a"
		align 2
_sfx_Lazer:	include "AMPS/sfx/Lazer.s2a"
		align 2
_sfx_LargeLazer:	include "AMPS/sfx/LargeLazer.s2a"
		align 2
_sfx_LazerFloor:	include "AMPS/sfx/LazerFloor.s2a"
		align 2
_sfx_PlatformKnock:	include "AMPS/sfx/PlatformKnock.s2a"
		align 2
_sfx_OilSlide:	include "AMPS/sfx/OilSlide.s2a"
		align 2
_sfx_MechaSonic:	include "AMPS/sfx/MechaSonic.s2a"
		align 2
_sfx_Error:	include "AMPS/sfx/Error.s2a"
		align 2
_sfx_EnterSS:	include "AMPS/sfx/EnterSS.s2a"
		align 2
_sfx_Continue:	include "AMPS/sfx/Continue.s2a"
		align 2
_sfx_Gloop:	include "AMPS/sfx/Gloop.s2a"
		align 2
_sfx_Chain:	include "AMPS/sfx/Chain.s2a"
		align 2
_sfx_Bonus:	include "AMPS/sfx/Bonus.s2a"
		align 2
_sfx_BigRing:	include "AMPS/sfx/BigRing.s2a"
		align 2
_sfx_ActionBlock:	include "AMPS/sfx/ActionBlock.s2a"
		align 2
_sfx_Diamonds:	include "AMPS/sfx/Diamonds.s2a"
		align 2
_sfx_QuickDoor:	include "AMPS/sfx/QuickDoor.s2a"
		align 2
_sfx_Electricity:	include "AMPS/sfx/Electricity.s2a"
		align 2
_sfx_Unk2B:	include "AMPS/sfx/Unk2B.s2a"
		align 2
_sfx_Unk38:	include "AMPS/sfx/Unk38.s2a"
		align 2
_sfx_Unk51:	include "AMPS/sfx/Unk51.s2a"
		align 2
_sfx_Unk52:	include "AMPS/sfx/Unk52.s2a"

musaddr:	
		align 2
_mus_EHZ:	include "AMPS/music/EHZ.s2a"
		align 2
_mus_CPZ:	include "AMPS/music/CPZ.s2a"
		align 2
_mus_ARZ:	include "AMPS/music/ARZ.s2a"
		align 2
_mus_CNZ:	include "AMPS/music/CNZ.s2a"
		align 2
_mus_HTZ:	include "AMPS/music/HTZ.s2a"
		align 2
_mus_MCZ:	include "AMPS/music/MCZ.s2a"
		align 2
_mus_OOZ:	include "AMPS/music/OOZ.s2a"
		align 2
_mus_MTZ:	include "AMPS/music/MTZ.s2a"
		align 2
_mus_SCZ:	include "AMPS/music/SCZ.s2a"
		align 2
_mus_WFZ:	include "AMPS/music/WFZ.s2a"
		align 2
_mus_DEZ:	include "AMPS/music/DEZ.s2a"
		align 2
_mus_HPZ:	include "AMPS/music/HPZ.s2a"
		align 2
_mus_EHZ2P:	include "AMPS/music/EHZ2P.s2a"
		align 2
_mus_CNZ2P:	include "AMPS/music/CNZ2P.s2a"
		align 2
_mus_MCZ2P:	include "AMPS/music/MCZ2P.s2a"
		align 2
_mus_SS:	include "AMPS/music/SS.s2a"
		align 2
_mus_Options:	include "AMPS/music/Options.s2a"
		align 2
_mus_Results2P:	include "AMPS/music/Results2P.s2a"
		align 2
_mus_Invincibility:	include "AMPS/music/Invincibility.s2a"
		align 2
_mus_SuperSonic:	include "AMPS/music/SuperSonic.s2a"
		align 2
_mus_Boss:	include "AMPS/music/Boss.s2a"
		align 2
_mus_FinalBoss:	include "AMPS/music/FinalBoss.s2a"
		align 2
_mus_Drowning:	include "AMPS/music/Drowning.s2a"
		align 2
_mus_Title:	include "AMPS/music/Title.s2a"
		align 2
_mus_GotThroughAct:	include "AMPS/music/GotThroughAct.s2a"
		align 2
_mus_Emerald:	include "AMPS/music/Emerald.s2a"
		align 2
_mus_ExtraLife:	include "AMPS/music/ExtraLife.s2a"
		align 2
_mus_GameOver:	include "AMPS/music/GameOver.s2a"
		align 2
_mus_Continue:	include "AMPS/music/Continue.s2a"
		align 2
_mus_Ending:	include "AMPS/music/Ending.s2a"
		align 2
_mus_Credits:	include "AMPS/music/Credits.s2a"
		align 2
_mus_SEGA:	include "AMPS/music/SEGA.s2a"

musend:
; ===========================================================================
; ---------------------------------------------------------------------------
; Include samples and filters
; ---------------------------------------------------------------------------

		align	$8000		; must be aligned to bank. By the way, these are also set in Z80.asm. Be sure to check it out
fLog:		binclude "AMPS/filters/Logarithmic.dat"	; logarithmic filter (no filter)
;fLinear:	binclude "AMPS/filters/Linear.dat"	; linear filter (no filter)

dacaddr:	asdata Z80E_Read*(MaxPitch/$100), $00
SWF_Stop:	asdata $8000-(2*Z80E_Read*(MaxPitch/$100)), $80
SWFR_Stop:	asdata Z80E_Read*(MaxPitch/$100), $00
; ---------------------------------------------------------------------------

	incSWF	Kick, Snare, Clap, Tom, Timpani, Bongo
	incSWF	Scratch, SEGA
	even

	listing on			; continue source listing
; ---------------------------------------------------------------------------
